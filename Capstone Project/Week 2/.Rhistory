load("ames_train.Rdata")
load("ames_train.Rdata")
colSums(is.na(ames_train))
colSums(is.na(ames_train)) %>% select.list('Alley', 'Misc.Feature')
library(devtools)
library(dplyr)
library(statsr)
colSums(is.na(ames_train)) %>% select.list('Alley', 'Misc.Feature')
colSums(is.na(ames_train)) %>% select('Alley', 'Misc.Feature')
c <- colSums(is.na(ames_train))
view(c)
type(c)
c
names(c)
colSums(is.na(ames_train)) %>% select("Alle")
colSums(is.na(ames_train)) %>% ["Alle"]
NAs <- colSums(is.na(ames_train))
NAs["Alle"]
NAs <- colSums(is.na(ames_train))
NAs["Alley"]
NAs <- colSums(is.na(ames_train))
NAs["Alley", "Misc.Feature", "Fence", "Pool.QC", "Fireplace.Qu", "Lot.Frontage" ]
NAs <- colSums(is.na(ames_train))
NAs["Alley", "Misc.Feature", "Fence", "Pool.QC", "Fireplace.Qu", "Lot.Frontage"]
names(c)
NAs <- colSums(is.na(ames_train))
#NAs["Alley", "Misc.Feature", "Fence", "Pool.QC", "Fireplace.Qu", "Lot.Frontage"]
NAs["Alley", "Lot.Frontage"]
NAs <- colSums(is.na(ames_train))
#NAs["Alley", "Misc.Feature", "Fence", "Pool.QC", "Fireplace.Qu", "Lot.Frontage"]
NAs["Alley", "Fence"]
NAs <- colSums(is.na(ames_train))
NAs[c("Alley", "Misc.Feature", "Fence", "Pool.QC", "Fireplace.Qu", "Lot.Frontage")]
srt(ames_train)
str(ames_train)
summary(ames_train)
is.numeric(ames_train)
?sapply
sapply(ames_train, is.numeric)
sapply(ames_train, is.numeric) %>% filter("TRUE")
filter(sapply(ames_train, is.numeric) == "TRUE")
sapply(ames_train, is.numeric) %>% select("TRUE")
sapply(ames_train, is.numeric) %>% select(x == "TRUE")
sapply(ames_train, is.numeric) %>% select["TRUE"]
sapply(ames_train, is.numeric) %>% ["TRUE"]
str(ames_train)
c <- str(ames_train)
class(c)
class(c)
c <- str(ames_train)
ames_train["Low.Qual.Fin.SF"]
View(ames_train)
as.character(unique(unlist(ames_train)))
rapply(ames_train,function(x)length(unique(x)))
?rapply
rapply(ames_train,length(unique(x)))
rapply(ames_train,function(x))
rapply(ames_train,function(x)
rapply(ames_train,function(x)length(unique(x)))
rapply(ames_train,function(x)length(unique(x)))
c <- rapply(ames_train,function(x)length(unique(x)))
sapply(ames_train,is.numeric)
str(sapply(ames_train,is.numeric))
summary(sapply(ames_train,is.numeric))
str(sapply(ames_train,is.numeric))
sapply(ames_train,is.numeric))[attributes()]
sapply(ames_train,is.numeric)) %>% attributes()
sapply(ames_train,is.numeric) %>% attributes()
sapply(ames_train,is.numeric) %>% values()
sapply(ames_train,is.numeric) %>% value()
numeric_columns <- ames_train[sapply(ames_train,is.numeric)]
rapply(numeric_columns,function(x)length(unique(x)))
#Filtering only the numeric columns
str(ames_train[sapply(ames_train,is.numeric)])
View(ames_train)
library(devtools)
library(dplyr)
library(statsr)
load("ames_train.Rdata")
NAs <- colSums(is.na(ames_train))
NAs[c("Alley", "Misc.Feature", "Fence", "Pool.QC", "Fireplace.Qu", "Lot.Frontage")]
#Filtering only the numeric columns
str(ames_train[sapply(ames_train,is.numeric)])
colSums(is.na(ames_train))[c("Alley", "Misc.Feature", "Fence", "Pool.QC", "Fireplace.Qu", "Lot.Frontage")]
library(devtools)
library(dplyr)
library(statsr)
load("ames_train.Rdata")
colSums(is.na(ames_train))[c("Alley", "Misc.Feature", "Fence", "Pool.QC", "Fireplace.Qu", "Lot.Frontage")]
#Filtering only the numeric columns
str(ames_train[sapply(ames_train,is.numeric)])
View(ames_train)
ames_train %>% group_by(neighborhood) %>% summarise()
ames_train %>% group_by(Neighborhood) %>% summarise()
?summmarise()
?summmarise
?summarise
ames_train %>% group_by(Neighborhood) %>% summarise(sdprice = sd(price))
?sort
ames_train %>% group_by(Neighborhood) %>% summarise(sdprice = sd(price)) %>% sort()
ames_train %>% group_by(Neighborhood) %>% summarise(sdprice = sd(price)) %>% sort(, decreasing = T)
ames_train %>% group_by(Neighborhood) %>% summarise(sdprice = sd(price)) %>% sort(, decreasing = T)
ames_train %>% group_by(Neighborhood) %>% summarise(sdprice = sd(price)) %>% arrange()
ames_train %>% group_by(Neighborhood) %>% summarise(sdprice = sd(price)) %>% arrange(desc)
ames_train %>% group_by(Neighborhood) %>% summarise(sdprice = sd(price)) %>% arrange(desc(sdprice))
ames_train %>% group_by(Neighborhood) %>% summarise(sdprice = sd(price)) %>% arrange(desc(sdprice))
ames_train %>% group_by(Neighborhood) %>% summarise(SD_price = sd(price)) %>% arrange(desc(SD_price))
library(devtools)
library(dplyr)
library(statsr)
load("ames_train.Rdata")
colSums(is.na(ames_train))[c("Alley", "Misc.Feature", "Fence", "Pool.QC", "Fireplace.Qu", "Lot.Frontage")]
#Filtering only the numeric columns
str(ames_train[sapply(ames_train,is.numeric)])
ames_train %>% group_by(Neighborhood) %>% summarise(SD_price = sd(price)) %>% arrange(desc(SD_price))
pA <- ggplot(data = ames_train, aes(y = price, x = Lot.Area)) + geom_point()
library(devtools)
library(dplyr)
library(statsr)
library(ggplot2)
pA <- ggplot(data = ames_train, aes(y = price, x = Lot.Area)) + geom_point()
pB <- ggplot(data = ames_train, aes(y = price, x = Bedroom.AbvGr)) + geom_point()
pC <- ggplot(data = ames_train, aes(y = price, x = Overall.Qual)) + geom_point()
pD <- ggplot(data = ames_train, aes(y = price, x = Year.Built)) + geom_point()
grid.arrange(pA, pB, pC, pD, nrow = 2, ncol = 2)
library(devtools)
library(dplyr)
library(statsr)
library(ggplot2)
library(gridExtra)
pA <- ggplot(data = ames_train, aes(y = price, x = Lot.Area)) + geom_point()
pB <- ggplot(data = ames_train, aes(y = price, x = Bedroom.AbvGr)) + geom_point()
pC <- ggplot(data = ames_train, aes(y = price, x = Overall.Qual)) + geom_point()
pD <- ggplot(data = ames_train, aes(y = price, x = Year.Built)) + geom_point()
grid.arrange(pA, pB, pC, pD, nrow = 2, ncol = 2)
pA <- ggplot(data = ames_train, aes(y = price, x = Lot.Area)) + geom_jitter()
pB <- ggplot(data = ames_train, aes(y = price, x = Bedroom.AbvGr)) + geom_jitter()
pC <- ggplot(data = ames_train, aes(y = price, x = Overall.Qual)) + geom_jitter()
pD <- ggplot(data = ames_train, aes(y = price, x = Year.Built)) + geom_jitter()
grid.arrange(pA, pB, pC, pD, nrow = 2, ncol = 2)
pA <- ggplot(data = ames_train, aes(y = price, x = area)) + geom_jitter()
pB <- ggplot(data = ames_train, aes(y = log(price), x = area)) + geom_jitter()
pC <- ggplot(data = ames_train, aes(y = price, x = log(area))) + geom_jitter()
pD <- ggplot(data = ames_train, aes(y = log(price), x = log(area))) + geom_jitter()
grid.arrange(pA, pB, pC, pD, nrow = 2, ncol = 2)
pA <- ggplot(data = ames_train, aes(y = price, x = area)) + geom_point()
pB <- ggplot(data = ames_train, aes(y = log(price), x = area)) + geom_point()
pC <- ggplot(data = ames_train, aes(y = price, x = log(area))) + geom_point()
pD <- ggplot(data = ames_train, aes(y = log(price), x = log(area))) + geom_point()
grid.arrange(pA, pB, pC, pD, nrow = 2, ncol = 2)
library(devtools)
library(dplyr)
library(statsr)
library(ggplot2)
library(gridExtra)
load("ames_train.Rdata")
colSums(is.na(ames_train))[c("Alley", "Misc.Feature", "Fence", "Pool.QC", "Fireplace.Qu", "Lot.Frontage")]
#Filtering only the numeric columns
str(ames_train[sapply(ames_train,is.numeric)])
ames_train %>% group_by(Neighborhood) %>% summarise(SD_price = sd(price)) %>% arrange(desc(SD_price))
pA <- ggplot(data = ames_train, aes(y = price, x = Lot.Area)) + geom_jitter()
pB <- ggplot(data = ames_train, aes(y = price, x = Bedroom.AbvGr)) + geom_jitter()
pC <- ggplot(data = ames_train, aes(y = price, x = Overall.Qual)) + geom_jitter()
pD <- ggplot(data = ames_train, aes(y = price, x = Year.Built)) + geom_jitter()
grid.arrange(pA, pB, pC, pD, nrow = 2, ncol = 2)
View(ames_train)
ames_train %>% filter(Garage.Cars == "NA")
?summarise
ames_train %>% filter(Garage.Cars == "NA") %>% summarise(noGarage = n())
ames_train %>% filter(Garage.Type == "NA") %>% summarise(noGarage = n())
ames_train %>% filter(is.na(Garage.Type)) %>% summarise(noGarage = n())
ames_train %>% filter(is.na(Garage.Type)) %>% summarise(noGarage = n())
ames_train %>% filter(!is.na(Garage.Type)) %>% summarise(noGarage = n())
ames_train %>% filter(is.na(Garage.Type)) %>% summarise(noGarage = n())
ames_train %>% filter(!is.na(Garage.Type)) %>% summarise(Garage = n())
ames_train %>% summarise(n(Year.Built > 1999)/100)
ames_train %>% summarise(count(Year.Built > 1999)/100)
summarise(ames_train.Year.build,  count(Year.Built > 1999)/100)
ames_train %>% summarise(total.count= n())
ames_train %>% summarise(total.count= n(), later1999 = sum( Year.Built >1999))
ames_train %>% summarise(total.count= n(), later1999 = sum( Year.Built >1999), %later1999 = total.count/later1999*100)
ames_train %>% summarise(total.count= n(), later1999 = sum( Year.Built >1999), %later1999 = total.count/later1999)
ames_train %>% summarise(total.count= n(), later1999 = sum( Year.Built >1999), %later1999 = (total.count)/(later1999))
ames_train %>% summarise(total.count= n(), later1999 = sum( Year.Built >1999), %later1999 = sum( Year.Built >1999)/n())
ames_train %>% summarise(total.count= n(), later1999 = sum( Year.Built >1999), %later1999 = sum(Year.Built >1999)/n())
ames_train %>% summarise(totalcount= n(), later1999 = sum( Year.Built >1999))
ames_train %>% summarise(totalcount= n(), later1999 = sum( Year.Built >1999))
ames_train %>% summary(price)
ames_train %>% summarise(totalcount= n(), later1999 = sum( Year.Built >1999))
summary(ames_train$price)
ames_train %>% summarise(totalcount= n(), later1999 = sum( Year.Built >1999))
summary(ames_train$price)
ames_train %>% filter(!is.na(Bsmt.Qual)) %>% summarise(Basement = n())
ames_train %>% summarise(totalcount= n(), later1999 = sum( Year.Built >1999))
summary(ames_train$price)
ames_train %>% filter(is.na(Bsmt.Qual)) %>% summarise(NoBasement = n())
?ifelse()
ames_train %>% mutate(garagePresent = ifelseis.na(Garage.Type), "Yes", "No")
ames_train %>% mutate(garagePresent = ifelse(is.na(Garage.Type), "Yes", "No"))
ames_train <- ames_train %>% mutate(garagePresent = ifelse(is.na(Garage.Type), "Yes", "No"))
ames_train <- ames_train %>% mutate(garagePresent = ifelse(is.na(Garage.Type), "Yes", "No"))
inference(y = area, x = garagePresent, data = ames_train, statistic = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
?inference
ames_train <- ames_train %>% mutate(garagePresent = ifelse(is.na(Garage.Type), "Yes", "No"))
inference(y = area, x = garagePresent, data = ames_train, statistic = "mean", type = "ht", null = 0,
alternative = "twosided", conf_level = 0.95, method = "theoretical")
ames_train <- ames_train %>% mutate(garagePresent = ifelse(is.na(Garage.Type), "Yes", "No"))
inference(y = area, x = garagePresent, data = ames_train, statistic = "mean", type = "ht", null = 0,
alternative = "twosided", conf_level = 0.95, method = "theoretical", order = c("Yes","No"))
ames_train %>% filter(area > 2000) %>% summarise(BedroomCount = n())
ames_train %>% filter(area > 2000) %>% summarise(TotalCount = n())
ames_train %>% filter(area > 2000) %>% summarise(BedroomsCount = sum(Bedroom.AbvGr))
ames_train %>% filter(area > 2000) %>% summarise(TotalCount = n())
ames_train %>% filter(area > 2000) %>% summarise(BedroomsCount = sum(Bedroom.AbvGr))
old_k <- 9
old_theta <- 1/3
new_k < - old_k + BedroomsCount
ames_train %>% filter(area > 2000) %>% summarise(TotalCount = n())
ames_train %>% filter(area > 2000) %>% summarise(BedroomsCount = sum(Bedroom.AbvGr))
old_k <- 9
old_theta <- 1/3
new_k <- old_k + BedroomsCount
ames_train %>% filter(area > 2000) %>% summarise(TotalCount = n())
BedroomsCount <- ames_train %>% filter(area > 2000) %>% summarise(BedroomsCount = sum(Bedroom.AbvGr))
old_k <- 9
old_theta <- 1/3
new_k <- old_k + BedroomsCount
TotalCount< -ames_train %>% filter(area > 2000) %>% summarise(TotalCount = n())
TotalCount<- ames_train %>% filter(area > 2000) %>% summarise(TotalCount = n())
BedroomsCount <- ames_train %>% filter(area > 2000) %>% summarise(BedroomsCount = sum(Bedroom.AbvGr))
old_k <- 9
old_theta <- 1/3
new_k <- old_k + BedroomsCount
new_theta <- old_theta/(old_theta*TotalCount + 1)
TotalCount<- ames_train %>% filter(area > 2000) %>% summarise(TotalCount = n())
BedroomsCount <- ames_train %>% filter(area > 2000) %>% summarise(BedroomsCount = sum(Bedroom.AbvGr))
old_k <- 9
old_theta <- 1/3
new_k <- old_k + BedroomsCount
new_theta <- old_theta/(old_theta*TotalCount + 1)
new_mean <- new_k*new_theta
new_mean
TotalCount<- ames_train %>% filter(area > 2000) %>% summarise(TotalCount = n())
BedroomsCount <- ames_train %>% filter(area > 2000) %>% summarise(BedroomsCount = sum(Bedroom.AbvGr))
old_k <- 9
old_theta <- 1/3
new_k <- old_k + BedroomsCount
new_theta <- old_theta/(old_theta*TotalCount + 1)
new_mean <- new_k*new_theta
new_sd <- new_theta * sqrt(new_k)
TotalCount<- ames_train %>% filter(area > 2000) %>% summarise(TotalCount = n())
BedroomsCount <- ames_train %>% filter(area > 2000) %>% summarise(BedroomsCount = sum(Bedroom.AbvGr))
old_k <- 9
old_theta <- 1/3
new_k <- old_k + BedroomsCount
new_theta <- old_theta/(old_theta*TotalCount + 1)
new_mean <- new_k*new_theta
new_sd <- new_theta * sqrt(new_k)
new_mean
new_sd
TotalCount<- ames_train %>% filter(area > 2000) %>% n()
TotalCount<- ames_train %>% filter(area > 2000) %>% n()
TotalCount<- ames_train %>% filter(area > 2000) %>% summarise(TotalCount = n())
BedroomsCount <- ames_train %>% filter(area > 2000) %>% sum(Bedroom.AbvGr)
TotalCount<- ames_train %>% filter(area > 2000) %>% summarise(TotalCount = n())
BedroomsCount <- ames_train %>% filter(area > 2000) %>% summarise(BedroomsCount = sum(Bedroom.AbvGr))
old_k <- 9
old_theta <- 1/3
new_k <- old_k + BedroomsCount
new_theta <- old_theta/(old_theta*TotalCount + 1)
new_mean <- new_k*new_theta
new_sd <- new_theta * sqrt(new_k)
new_mean
new_sd
TotalCount<- ames_train %>% filter(area > 2000) %>% nrow()
BedroomsCount <- ames_train %>% filter(area > 2000) %>% sum(Bedroom.AbvGr)
TotalCount<- ames_train %>% filter(area > 2000) %>% nrow()
BedroomsCount <- ames_train %>% filter(area > 2000) %>% Bedroom.AbvGr %>% sum()
TotalCount<- ames_train %>% filter(area > 2000) %>% nrow()
BedroomsCount <- ames_train %>% filter(area > 2000) %>% select(Bedroom.AbvGr) %>% sum()
old_k <- 9
old_theta <- 1/3
new_k <- old_k + BedroomsCount
new_theta <- old_theta/(old_theta*TotalCount + 1)
new_mean <- new_k*new_theta
new_sd <- new_theta * sqrt(new_k)
new_mean
new_sd
ggplot(data = ames_train, aes(y = log(price), x = log(area))) + geom_point()
ggplot(data = ames_train, aes(y = log(price), x = log(area))) +
geom_jitter() +
geom_smooth(method = "lm")
ggplot(data = ames_train, aes(y = log(price), x = log(area))) +
geom_point() +
geom_smooth(method = "lm")
ggplot(data = ames_train, aes(y = log(price), x = log(area))) +
geom_point() +
geom_smooth(method = "lm")
model_lm <- lm(log(price) ~ log(area), data = ames_train)
ggplot(data = ames_train, aes(y = log(price), x = log(area))) +
geom_point() +
geom_smooth(method = "lm")
model_lm <- lm(log(price) ~ log(area), data = ames_train)
model_lm$residuals
ggplot(data = ames_train, aes(y = log(price), x = log(area))) +
geom_point() +
geom_smooth(method = "lm")
model_lm <- lm(log(price) ~ log(area), data = ames_train)
arrange(dec((model_lm$residuals)^2))
ggplot(data = ames_train, aes(y = log(price), x = log(area))) +
geom_point() +
geom_smooth(method = "lm")
model_lm <- lm(log(price) ~ log(area), data = ames_train)
arrange(desc((model_lm$residuals)^2))
ggplot(data = ames_train, aes(y = log(price), x = log(area))) +
geom_point() +
geom_smooth(method = "lm")
model_lm <- lm(log(price) ~ log(area), data = ames_train)
residualsSquared <- (model_lm$residuals)^2))
?power
ggplot(data = ames_train, aes(y = log(price), x = log(area))) +
geom_point() +
geom_smooth(method = "lm")
model_lm <- lm(log(price) ~ log(area), data = ames_train)
residualsSquared <- ((model_lm$residuals)^2)
ggplot(data = ames_train, aes(y = log(price), x = log(area))) +
geom_point() +
geom_smooth(method = "lm")
model_lm <- lm(log(price) ~ log(area), data = ames_train)
arrange(dec((model_lm$residuals)^2))
ggplot(data = ames_train, aes(y = log(price), x = log(area))) +
geom_point() +
geom_smooth(method = "lm")
model_lm <- lm(log(price) ~ log(area), data = ames_train)
arrange(desc((model_lm$residuals)^2))
ggplot(data = ames_train, aes(y = log(price), x = log(area))) +
geom_point() +
geom_smooth(method = "lm")
model_lm <- lm(log(price) ~ log(area), data = ames_train)
plot_ss(x = log(area), y = log(price), data = ames_train, showSquares = TRUE)
model_lm <- lm(log(price) ~ log(area), data = ames_train)
plot_ss(x = log(area), y = log(price), data = ames_train, showSquares = TRUE)
model_lm <- lm(log(price) ~ log(area), data = ames_train)
plot_ss(x = log(area), y = log(price), data = ames_train, showSquares = TRUE)
ggplot(data = ames_train, aes(y = log(price), x = log(area))) +
geom_point() +
geom_smooth(method = "lm")
model_lm <- lm(log(price) ~ log(area), data = ames_train)
ggplot(data = ames_train, aes(y = log(price), x = log(area))) +
geom_point() +
geom_smooth(method = "lm")
model_lm <- lm(log(price) ~ log(area), data = ames_train)
ggplot(data = ames_train, aes(y = log(price), x = log(area))) +
geom_point() +
geom_smooth(method = "lm")
which(lm$residuals)
?which
model_lm <- lm(log(price) ~ log(area), data = ames_train)
ggplot(data = ames_train, aes(y = log(price), x = log(area))) +
geom_point() +
geom_smooth(method = "lm")
plot(ames_train$price)
plot(density(ames_train$price))
ames_train %>% filter(Bldg.Type == '1Fam') %>% group_by(Neighborhood) %>% summarise(count = n()) %>% arrange(desc(count))
ames_train %>% filter(Bldg.Type = '1Fam') %>% group_by(Neighborhood) %>% summarise(count = n()) %>% arrange(desc(count))
ames_train %>% filter(Bldg.Type == '1Fam') %>% group_by(Neighborhood) %>% summarise(count = n()) %>% arrange(desc(count))
ames_train %>% group_by(Neighborhood, Bldg.Type) %>% summarise(count = n()) %>% arrange(desc(count))
ames_train %>% group_by(Bldg.Type, Neighborhood) %>% summarise(count = n()) %>% arrange(desc(count))
ames_train %>% group_by(Bldg.Type, Neighborhood) %>% summarise(mean(Bldg.Type == "1Fam"))
ames_train %>% group_by(Neighborhood) %>% summarise(mean(Bldg.Type == "1Fam"))
ames_train %>% group_by(Neighborhood) %>% summarise(mean(Bldg.Type == "1Fam"))
ames_train %>% group_by(Neighborhood) %>% filter((Bldg.Type == "1Fam")) %>% summarise(mean(Bldg.Type == "1Fam"))
ggplot(data = ames_train, aes(y = log(price), x = Bedroom.AbvGr)) +
geom_point()
ggplot(data = ames_train, aes(y = log(area), x = Bedroom.AbvGr)) +
geom_point()
ames_train %>% filter(BsmtFin.Type.1 == 'Unf') %>% summarise(mean_area = mean(area))
ames_train %>% filter(BsmtFin.Type.1 == 'Unf') %>% summarise(mean_area = mean(Bsmt.Unf.SF))
ames_train %>% filter(BsmtFin.Type.2 == 'Unf') %>% summarise(mean_area = mean(Bsmt.Unf.SF))
ames_train %>% filter(BsmtFin.Type.2 == 'Unf') %>% filter(BsmtFin.Type.1 == 'Unf') %>% summarise(mean_area = mean(Bsmt.Unf.SF))
ames_train %>% filter(BsmtFin.Type.2 == 'Unf') %>% filter(BsmtFin.Type.1 == 'Unf') %>% summarise(mean_area = mean(Bsmt.Unf.SF2))
ames_train %>% filter(BsmtFin.Type.2 == 'Unf') %>% filter(BsmtFin.Type.1 == 'Unf') %>% summarise(mean_area = mean(Bsmt.Unf.SF))
ames_train %>% filter(BsmtFin.Type.2 == 'Unf' && BsmtFin.Type.1 == 'Unf') %>% summarise(mean_area = mean(Bsmt.Unf.SF))
View(ames_train)
ames_train %>% filter(BsmtFin.Type.2 == 'Unf', BsmtFin.Type.1 == 'Unf') %>% summarise(mean_area = mean(Bsmt.Unf.SF))
ames_train %>% filter(BsmtFin.Type.2 == 'Unf', BsmtFin.Type.1 == 'Unf') %>% summarise(mean_area = mean(Total.Bsmt.SF))
ames_train %>% filter(BsmtFin.Type.2 == 'Unf', BsmtFin.Type.1 == 'Unf', !is.na(Total.Bsmt.SF)) %>% summarise(mean_area = mean(Total.Bsmt.SF))
ames_train %>% filter(BsmtFin.Type.2 == 'Unf', BsmtFin.Type.1 == 'Unf', !is.na(Bsmt.Unf.SF)) %>% summarise(mean_area = mean(Bsmt.Unf.SF))
ames_train %>% filter(BsmtFin.Type.2 == 'Unf', BsmtFin.Type.1 == 'Unf', !is.na(Bsmt.Unf.SF)) %>% summarise(mean_area = average(Bsmt.Unf.SF))
ames_train %>% filter(BsmtFin.Type.2 == 'Unf', BsmtFin.Type.1 == 'Unf', !is.na(Bsmt.Unf.SF)) %>% summarise(mean_area = mean(Bsmt.Unf.SF))
ames_train %>% filter(BsmtFin.Type.2 == 'Unf', BsmtFin.Type.1 == 'Unf', is.na(Bsmt.Unf.SF)) %>% summarise(mean_area = mean(Bsmt.Unf.SF))
ames_train %>% filter(BsmtFin.Type.2 == 'Unf', BsmtFin.Type.1 == 'Unf', !is.na(Bsmt.Unf.SF)) %>% summarise(mean_area = mean(Bsmt.Unf.SF))
load("ames_train.Rdata")
library(MASS)
library(dplyr)
library(ggplot2)
load("ames_train.Rdata")
library(MASS)
library(dplyr)
library(ggplot2)
load("ames_train.Rdata")
library(MASS)
library(dplyr)
library(ggplot2)
library(devtools)
load("ames_train.Rdata")
library(MASS)
library(dplyr)
library(ggplot2)
library(devtools)
library(statsr)
ames_train <- ames_train %>%
mutate(age = 2017 - Year.Built)
ggplot(ames_train, aes(x=age), labs(title = "Distribution of House Age", y = "Number of Houses", x = "Age of the House in 2017") + geom_histogram(bins=30, fill = '#F8766D')
ames_train <- ames_train %>%
mutate(age = 2017 - Year.Built)
ggplot(ames_train, aes(x=age), labs(title = "Distribution of House Age", y = "Number of Houses", x = "Age of the House in 2017")) + geom_histogram(bins=30, fill = '#F8766D')
ames_train <- ames_train %>%
mutate(age = 2017 - Year.Built)
ggplot(ames_train, aes(x=age), labs(title = "Distribution of House Age", y = "Number of Houses", x = "Age of the House in 2017")) + geom_histogram(bins=30, fill = 'Cyan')
ames_train <- ames_train %>%
mutate(age = 2017 - Year.Built)
ggplot(ames_train, aes(x=age), labs(title = "Distribution of House Age", y = "Number of Houses", x = "Age of the House in 2017")) + geom_histogram(bins=30, fill = 'Magenata')
ames_train <- ames_train %>%
mutate(age = 2017 - Year.Built)
ggplot(ames_train, aes(x=age), labs(title = "Distribution of House Age", y = "Number of Houses", x = "Age of the House in 2017")) + geom_histogram(bins=30, fill = 'Magenta')
ames_train <- ames_train %>%
mutate(age = 2017 - Year.Built)
ggplot(ames_train, aes(x=age), labs(title = "Distribution of House Age", y = "Number of Houses", x = "Age of the House in 2017")) + geom_histogram(bins=30, fill = 'Magenta')
summary(ames_train$age)
ames_train_loc<-ames_train%>%
select(price, Neighborhood)%>%
group_by(Neighborhood)%>%
summarise(median = median(price), max = max(price), min = min(price), sd = sd(price))
ames_train_loc<-ames_train %>%
select(price, Neighborhood) %>%
group_by(Neighborhood) %>%
summarise(median = median(price), max = max(price), min = min(price), sd = sd(price))
ames_train <- ames_train %>%
select(price, Neighborhood) %>%
group_by(Neighborhood) %>%
summarise(median = median(price), max = max(price), min = min(price), sd = sd(price))
ames_train <- ames_train %>%
mutate(age = 2017 - Year.Built)
ggplot(ames_train, aes(x=age), labs(title = "Distribution of House Age", y = "Number of Houses", x = "Age of the House in 2017")) + geom_histogram(bins=30, fill = 'Magenta')
summary(ames_train$age)
ames_train <- ames_train %>%
select(price, Neighborhood) %>%
group_by(Neighborhood) %>%
summarise(median = median(price), max = max(price), min = min(price), sd = sd(price))
load("ames_train.Rdata")
library(MASS)
library(dplyr)
library(ggplot2)
library(devtools)
library(statsr)
ames_train <- ames_train %>%
mutate(age = 2017 - Year.Built)
ggplot(ames_train, aes(x=age), labs(title = "Distribution of House Age", y = "Number of Houses", x = "Age of the House in 2017")) + geom_histogram(bins=30, fill = 'Magenta')
summary(ames_train$age)
ames_train <- ames_train %>%
select(price, Neighborhood) %>%
group_by(Neighborhood) %>%
summarise(median = median(price), max = max(price), min = min(price), sd = sd(price))
